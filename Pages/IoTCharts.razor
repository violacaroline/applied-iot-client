@page "/iot-charts"

@using ChartJs.Blazor.PieChart
@using applied_iot_client.Data
@using System.Net.Http
@using System.Text.Json

<PageTitle>Applied IoT Charts</PageTitle>

<h1>Charts showing temperature, humidity and air quality</h1>

<Chart Config="_pieConfig"></Chart>

@code {
  private PieConfig? _pieConfig;

  protected override void OnInitialized()
  {
    ConfigurePieConfig();
  }


  private async void ConfigurePieConfig()
  {
    _pieConfig = new PieConfig();

    _pieConfig.Options = new PieOptions
      {
        Responsive = true,
        Title = new OptionsTitle
        {
          Display = true,
          Text = "Air Quality"
        }
      };

    List<int> listOfOnes = new List<int>();
    List<int> listOfZeros = new List<int>();

    List<int> airQualityList = await this.GetPieData();
    await this.GetLineDataHumidity();
    await this.GetLineDataTemperature();

    // Loop through the airQualityList and populate the respective lists
    foreach (var dataPoint in airQualityList)
    {
      if (dataPoint == 1)
      {
        listOfOnes.Add(dataPoint);
      }
      else
      {
        listOfZeros.Add(dataPoint);
      }
    }

    foreach (var value in new[] { "No Gas", "Gas Detected" })
    {
      _pieConfig.Data.Labels.Add(value);
    }


    var pieData = new PieDataset<int>(new[] { listOfOnes.Count, listOfZeros.Count })
      {
        BackgroundColor = new[]
        {
          ColorUtil.ColorHexString(0, 255, 0),
          ColorUtil.ColorHexString(255, 0, 0),
        }
      };

    _pieConfig.Data.Datasets.Add(pieData);
  }

  private async Task<List<int>> GetPieData()
  {
    // Create an instance of HttpClient to make the HTTP request
    var httpClient = new HttpClient();

    // Make the GET request to the API endpoint
    string apiKey = "aio_rqsg52Uk4PePfpKQqEWDZoO6aqi3";

    var apiUrl =
    "https://io.adafruit.com/api/v2/CarolineA/feeds/temperature-and-humidity-and-airquality-and-led.airquality/data";

    var requestUrl = $"{apiUrl}?X-AIO-Key={apiKey}";

    var response = await httpClient.GetAsync(requestUrl);

    Console.WriteLine($"Response content: {response.Content}");

    // Read the response content as a string
    var data = await response.Content.ReadAsStringAsync();
    var jsonObject = JsonSerializer.Deserialize<dynamic>(data);

    var values = new List<int>();

    foreach (var dataPoint in jsonObject.EnumerateArray())
    {
      var airQualityData = JsonSerializer.Deserialize<AirQualityData>(dataPoint.GetRawText());

      int value = int.Parse(airQualityData.value);

      values.Add(value);
    }
    return values;
  }

  private async Task<List<double>> GetLineDataHumidity()
  {
    // Create an instance of HttpClient to make the HTTP request
    var httpClient = new HttpClient();

    // Make the GET request to the API endpoint
    string apiKey = "aio_rqsg52Uk4PePfpKQqEWDZoO6aqi3";

    var apiUrl =
    "https://io.adafruit.com/api/v2/CarolineA/feeds/temperature-and-humidity-and-airquality-and-led.humidity/data";

    var requestUrl = $"{apiUrl}?X-AIO-Key={apiKey}";

    var response = await httpClient.GetAsync(requestUrl);

    // Read the response content as a string
    var data = await response.Content.ReadAsStringAsync();
    var jsonObject = JsonSerializer.Deserialize<dynamic>(data);

    var values = new List<double>();

    foreach (var dataPoint in jsonObject.EnumerateArray())
    {
      var airQualityData = JsonSerializer.Deserialize<AirQualityData>(dataPoint.GetRawText());

      string formattedValue = airQualityData.value.Replace('.', ',');

      double value = double.Parse(formattedValue);

      values.Add(value);
    }
    return values;
  }

  private async Task<List<double>> GetLineDataTemperature()
  {
    // Create an instance of HttpClient to make the HTTP request
    var httpClient = new HttpClient();

    // Make the GET request to the API endpoint
    string apiKey = "aio_rqsg52Uk4PePfpKQqEWDZoO6aqi3";

    var apiUrl =
    "https://io.adafruit.com/api/v2/CarolineA/feeds/temperature-and-humidity-and-airquality-and-led.temperature/data";

    var requestUrl = $"{apiUrl}?X-AIO-Key={apiKey}";

    var response = await httpClient.GetAsync(requestUrl);

    // Read the response content as a string
    var data = await response.Content.ReadAsStringAsync();
    var jsonObject = JsonSerializer.Deserialize<dynamic>(data);

    var values = new List<double>();

    foreach (var dataPoint in jsonObject.EnumerateArray())
    {
      var airQualityData = JsonSerializer.Deserialize<AirQualityData>(dataPoint.GetRawText());

      string formattedValue = airQualityData.value.Replace('.', ',');

      double value = double.Parse(formattedValue);
      Console.WriteLine($"The Temperature: {value}");

      values.Add(value);
    }
    return values;
  }
}
