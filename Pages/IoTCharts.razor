@page "/iot-charts"

@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using Newtonsoft.Json
@using System.Net.Http

<PageTitle>Applied IoT Charts</PageTitle>

<h1>Charts showing temperature, humidity and air quality</h1>

<Chart Config="_pieConfig"></Chart>
<Chart Config="_lineConfig"></Chart>

@code {
  private PieConfig? _pieConfig;
  private LineConfig? _lineConfig;

  private HttpClient httpClient;

  private String? apiKey;

  protected override void OnInitialized()
  {
    this.httpClient = new HttpClient();
    ConfigurePieConfig();
    ConfigureLineConfig();
  }


  private async void ConfigurePieConfig()
  {
    _pieConfig = new PieConfig();

    _pieConfig.Options = new PieOptions
      {
        Responsive = true,
        Title = new OptionsTitle
        {
          Display = true,
          Text = "Air Quality"
        }
      };

    List<int> listOfOnes = new List<int>();
    List<int> listOfZeros = new List<int>();

    List<int> airQualityList = await this.GetPieData();

    // Loop through the airQualityList and populate the respective lists
    foreach (var dataPoint in airQualityList)
    {
      if (dataPoint == 1)
      {
        listOfOnes.Add(dataPoint);
      }
      else
      {
        listOfZeros.Add(dataPoint);
      }
    }

    foreach (var value in new[] { "No Gas", "Gas Detected" })
    {
      _pieConfig.Data.Labels.Add(value);
    }


    var pieData = new PieDataset<int>(new[] { listOfOnes.Count, listOfZeros.Count })
      {
        BackgroundColor = new[]
        {
          ColorUtil.ColorHexString(0, 255, 0),
          ColorUtil.ColorHexString(255, 0, 0),
        }
      };

    _pieConfig.Data.Datasets.Add(pieData);
  }

  private async void ConfigureLineConfig()
  {
    _lineConfig = new LineConfig();

    _lineConfig.Options = new LineOptions
      {
        Responsive = true,
        Title = new OptionsTitle
        {
          Display = true,
          Text = "Temperature & Humidity"
        }
      };

    List<double> humidityData =  await this.GetLineDataHumidity();

    List<double> temperatureData = await this.GetLineDataTemperature();

    IDataset<double> humidityDataSet = new LineDataset<double>(humidityData)
      {
        Label = "Humidity",
        BackgroundColor = ColorUtil.ColorHexString(0, 255, 0),
        BorderColor = ColorUtil.ColorHexString(0, 255, 0),
        Fill = FillingMode.Disabled
      };

    IDataset<double> temperatureDataSet = new LineDataset<double>(temperatureData)
      {
        Label = "Temperature",
        BackgroundColor = ColorUtil.ColorHexString(255, 0, 0),
        BorderColor = ColorUtil.ColorHexString(255, 0, 0),
        Fill = FillingMode.Disabled
      };

    _lineConfig.Data.Datasets.Add(humidityDataSet);
    _lineConfig.Data.Datasets.Add(temperatureDataSet);
  }

  private async Task<List<int>> GetPieData()
  {
    var apiUrlAirquality = "http://localhost:8088/api/airquality";

    var response = await this.httpClient.GetAsync(apiUrlAirquality);

    var responseContent = await response.Content.ReadAsStringAsync();

    var values = JsonConvert.DeserializeObject<List<int>>(responseContent);

    return values;
  }

  private async Task<List<double>> GetLineDataHumidity()
  {
    var apiUrlHumidity = "http://localhost:8088/api/humidity";

    var response = await this.httpClient.GetAsync(apiUrlHumidity);

    var responseContent = await response.Content.ReadAsStringAsync();

    var values = JsonConvert.DeserializeObject<List<double>>(responseContent);

    return values;
  }

  private async Task<List<double>> GetLineDataTemperature()
  {
    var apiUrlTemp = "http://localhost:8088/api/temperature";

    var response = await this.httpClient.GetAsync(apiUrlTemp);

    var responseContent = await response.Content.ReadAsStringAsync();

    var values = JsonConvert.DeserializeObject<List<double>>(responseContent);

    return values;
  }
}
